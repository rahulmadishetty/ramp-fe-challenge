{"ast":null,"code":"var _jsxFileName = \"/Users/rahulmadishetty/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  _s();\n\n  let {\n    transaction,\n    loading,\n    setTransactionApproval: consumerSetTransactionApproval\n  } = _ref;\n  const [approved, setApproved] = useState(transaction.approved);\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const transactions = useMemo(() => {\n    var _ref2, _paginatedTransaction;\n\n    return (_ref2 = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref2 !== void 0 ? _ref2 : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" - \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: approved,\n      disabled: loading,\n      onChange: async newValue => {\n        var _transaction$employee;\n\n        await consumerSetTransactionApproval({\n          transactionId: transaction.id,\n          newValue\n        });\n        setApproved(newValue);\n\n        if ((_transaction$employee = transaction.employee) !== null && _transaction$employee !== void 0 && _transaction$employee.id) {\n          await transactionsByEmployeeUtils.fetchById(transaction.employee.id);\n        } else {\n          await paginatedTransactionsUtils.fetchAll();\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionPane, \"UjNUcqL50huGww1RSu5bpgsCHVE=\", false, function () {\n  return [usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["useState","InputCheckbox","usePaginatedTransactions","useTransactionsByEmployee","TransactionPane","transaction","loading","setTransactionApproval","consumerSetTransactionApproval","approved","setApproved","data","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","transactions","useMemo","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","id","newValue","transactionId","fetchById","fetchAll","Intl","NumberFormat","style","currency"],"sources":["/Users/rahulmadishetty/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["import { useState } from \"react\"\nimport { InputCheckbox } from \"../InputCheckbox\"\nimport { TransactionPaneComponent } from \"./types\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n\nexport const TransactionPane: TransactionPaneComponent = ({\n  transaction,\n  loading,\n  setTransactionApproval: consumerSetTransactionApproval,\n}) => {\n  const [approved, setApproved] = useState(transaction.approved)\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n\n  const transactions = useMemo(\n      () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n      [paginatedTransactions, transactionsByEmployee]\n    )\n    \n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant} </p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        id={transaction.id}\n        checked={approved}\n        disabled={loading}\n        onChange={async (newValue) => {\n          await consumerSetTransactionApproval({\n            transactionId: transaction.id,\n            newValue,\n          })\n\n          setApproved(newValue)\n\n          if (transaction.employee?.id) {\n              await transactionsByEmployeeUtils.fetchById(transaction.employee.id)\n          } else {\n              await paginatedTransactionsUtils.fetchAll()\n          }\n          \n        }}\n      />\n    </div>\n  )\n}\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n})\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,SAASC,wBAAT,QAAyC,kCAAzC;AACA,SAASC,yBAAT,QAA0C,mCAA1C;;AAEA,OAAO,MAAMC,eAAyC,GAAG,QAInD;EAAA;;EAAA,IAJoD;IACxDC,WADwD;IAExDC,OAFwD;IAGxDC,sBAAsB,EAAEC;EAHgC,CAIpD;EACJ,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAACK,WAAW,CAACI,QAAb,CAAxC;EACA,MAAM;IAAEE,IAAI,EAAEC,qBAAR;IAA+B,GAAGC;EAAlC,IAAiEX,wBAAwB,EAA/F;EACA,MAAM;IAAES,IAAI,EAAEG,sBAAR;IAAgC,GAAGC;EAAnC,IAAmEZ,yBAAyB,EAAlG;EAEA,MAAMa,YAAY,GAAGC,OAAO,CACxB;IAAA;;IAAA,yCAAML,qBAAN,aAAMA,qBAAN,uBAAMA,qBAAqB,CAAED,IAA7B,yEAAqCG,sBAArC,yCAA+D,IAA/D;EAAA,CADwB,EAExB,CAACF,qBAAD,EAAwBE,sBAAxB,CAFwB,CAA5B;EAKA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAG,SAAS,EAAC,UAAb;QAAA,WAAyBT,WAAW,CAACa,QAArC;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBf,WAAW,CAACgB,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAG,SAAS,EAAC,8BAAb;QAAA,WACGhB,WAAW,CAACiB,QAAZ,CAAqBC,SADxB,OACoClB,WAAW,CAACiB,QAAZ,CAAqBE,QADzD,SACsEnB,WAAW,CAACoB,IADlF;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAQE,QAAC,aAAD;MACE,EAAE,EAAEpB,WAAW,CAACqB,EADlB;MAEE,OAAO,EAAEjB,QAFX;MAGE,QAAQ,EAAEH,OAHZ;MAIE,QAAQ,EAAE,MAAOqB,QAAP,IAAoB;QAAA;;QAC5B,MAAMnB,8BAA8B,CAAC;UACnCoB,aAAa,EAAEvB,WAAW,CAACqB,EADQ;UAEnCC;QAFmC,CAAD,CAApC;QAKAjB,WAAW,CAACiB,QAAD,CAAX;;QAEA,6BAAItB,WAAW,CAACiB,QAAhB,kDAAI,sBAAsBI,EAA1B,EAA8B;UAC1B,MAAMX,2BAA2B,CAACc,SAA5B,CAAsCxB,WAAW,CAACiB,QAAZ,CAAqBI,EAA3D,CAAN;QACH,CAFD,MAEO;UACH,MAAMb,0BAA0B,CAACiB,QAA3B,EAAN;QACH;MAEF;IAlBH;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA+BD,CA7CM;;GAAM1B,e;UAM4DF,wB,EACEC,yB;;;KAP9DC,e;AA+Cb,MAAMe,cAAc,GAAG,IAAIY,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACpDC,KAAK,EAAE,UAD6C;EAEpDC,QAAQ,EAAE;AAF0C,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}