{"ast":null,"code":"var _jsxFileName = \"/Users/rahulmadishetty/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const refetchTransactions = useCallback(async () => {\n    if (transactionsByEmployee !== null) {\n      await transactionsByEmployeeUtils.fetchById(transactionsByEmployee[0].employee.id);\n    } else {\n      await paginatedTransactionsUtils.fetchAll();\n    }\n  }, [transactionsByEmployee, transactionsByEmployeeUtils, paginatedTransactionsUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        //Bug 5 fix: removed set isloading value and the initial isloading value altogether\n        isLoading: employeeUtils.loading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => {\n          if (item === null || item.id === \"\") {\n            return {\n              value: \"\",\n              label: \"All Employees\"\n            };\n          }\n\n          return {\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`\n          };\n        } // Bug 3 fix : Instead of doing nothing when the value is null or if the id is an empty string < I load all trasactions\n        ,\n        onChange: async newValue => {\n          if (newValue === null || newValue.id === \"\") {\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          refetchTransactions: refetchTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), paginatedTransactions !== null && paginatedTransactions.nextPage !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+KINcM+VjXwmlxjpnGhgPPA+3eY=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","refetchTransactions","employee","id","loading","item","value","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/rahulmadishetty/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  const refetchTransactions = useCallback(async () => {\n  if (transactionsByEmployee !== null) {\n    await transactionsByEmployeeUtils.fetchById(transactionsByEmployee[0].employee.id)\n  } else {\n    await paginatedTransactionsUtils.fetchAll()\n  }\n  }, [transactionsByEmployee, transactionsByEmployeeUtils, paginatedTransactionsUtils])\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          //Bug 5 fix: removed set isloading value and the initial isloading value altogether\n          isLoading={employeeUtils.loading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => {\n            if (item === null || item.id === \"\") {\n            return { value: \"\", label: \"All Employees\" }\n          }\n          return {\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          }\n          }}\n          // Bug 3 fix : Instead of doing nothing when the value is null or if the id is an empty string < I load all trasactions\n          onChange={async (newValue) => {\n            if (newValue === null || newValue.id === \"\") {\n              await loadAllTransactions()\n            } \n            else {\n            await loadTransactionsByEmployee(newValue.id)\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n          {/* for bug 7 */}\n        <div className=\"RampGrid\">\n          <Transactions \n          transactions={transactions} \n          refetchTransactions={refetchTransactions} \n          />\n          \n\n          {/* Bug 6  fixed - Here the View More button is shown only if there are more transactions */}\n          {paginatedTransactions !== null &&\n            paginatedTransactions.nextPage !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}